# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0



# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []

    def __str__(self):
        self.string = "hand contains: "
        for item in range(len(self.hand)):
            self.string += str(self.hand[item]) + " "
        return self.string
    
    def add_card(self, card):
        self.hand.append(card)
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then
        # add 10 to hand value if it doesn't bust
        value = 0
        contains_ace = False
        for card in self.hand:
            value += VALUES[card.get_rank()]
        for card in self.hand:
            if card.get_rank == "A":
                contains_ace = True
        if contains_ace == True and value <= 11:
            value += 10
        return value

    def draw(self, canvas, pos):
        for card in self.hand:
            card.draw(canvas,pos)
            pos[0] += CARD_SIZE[0]
# draw a hand on the canvas, use the draw method for cards
 
            
# define deck class 
class Deck:
    def __init__(self):
        self.deck = [ Card(suit, rank) for suit in SUITS for rank in RANKS]
        print self.deck

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop()
    
    def __str__(self):
        self.string_deck = "Deck contains: "
        for i in range(len(self.deck)):
            self.string_deck += str(self.deck[i]) + " "
        return self.string_deck   
    
#define event handlers for buttons
def deal():
    global outcome, score, in_play, deck, player_hand, dealer_hand
    if in_play == True:
        score -= 1
    outcome = "Hit or stand?"
    deck = Deck()
    player_hand = Hand()
    dealer_hand = Hand()
    deck.shuffle()
    player_hand.add_card(deck.deal_card())
    player_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    dealer_hand.add_card(deck.deal_card())
    print "Dealer's", dealer_hand
    print "Player's", player_hand
    in_play = True
    
def hit():
    global in_play, score, outcome
    # if the hand is in play, hit the player
    if in_play and player_hand.get_value() <= 21:
        player_hand.add_card(deck.deal_card())
    if in_play and player_hand.get_value() > 21:
        outcome = "You lose. Click deal for another round ;)"
        in_play = False
        score -= 1
    elif not in_play:
        outcome = "Click deal to play again."
    print "Dealer's", dealer_hand
    print "Player's", player_hand
    
def stand():  
    global score, in_play, dealer_hand, player_hand, outcome
    if in_play:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(deck.deal_card())
        print "Dealer's", dealer_hand
        if dealer_hand.get_value() == 21 or (
            dealer_hand.get_value() == player_hand.get_value()):
            outcome = "You lose. Click deal for another round ;)"
            score -= 1
        
        elif dealer_hand.get_value() > (player_hand.get_value()
                                       ) and dealer_hand.get_value() <= 21:
            outcome = "You lose. Click deal for another round ;)"
            score -= 1
            
        else: 
            outcome = "You win! Click deal for another round."
            score += 1
        in_play = False
    else:
        outcome = "Click deal to play again."
# draw handler    
def draw(canvas):
    # test
    
    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])
    dealer_hand.draw(canvas, [0, 1.5 * CARD_SIZE[1]])
    player_hand.draw(canvas, [0, 3 * CARD_SIZE[1]])
    canvas.draw_text("Dealer's hand", (0, 1.5 * CARD_SIZE[1] - 10), 25, "White")
    canvas.draw_text("Your hand", (0, 3 * CARD_SIZE[1] - 10), 25, "White")
    canvas.draw_text(outcome, (0.5 * CARD_SIZE[0], CARD_SIZE[1]), 30, "White")
    canvas.draw_text("21 Blackjack", (2 * CARD_SIZE[0], 0.5 * CARD_SIZE[1]), 50, "White", "sans-serif")
    if in_play:
        pos = [0, 1.5 * CARD_BACK_SIZE[1]]
        card_loc = (CARD_BACK_CENTER[0], CARD_BACK_CENTER[1])
        canvas.draw_image(card_back, card_loc, CARD_SIZE, [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
        
    label.set_text("Score: " + str(score))
        
        

# initialization frame
frame = simplegui.create_frame("Blackjack", 8 * CARD_SIZE[0], 4* CARD_SIZE[1])
frame.set_canvas_background("Green")
label = frame.add_label("Score: 0")
#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)



# get things rolling
deal()
frame.start()
